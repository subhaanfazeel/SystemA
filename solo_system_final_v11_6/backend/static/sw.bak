// Auto-unregister old service worker if version mismatch
try {
  const url = typeof self !== 'undefined' && self.location ? new URL(self.location.href) : null;
  if (url) {
    const v = url.search ? url.search.replace('?', '') : '';
    if (v && v !== 'v6' && self.registration) {
      // unregister and skip waiting
      self.registration.unregister().catch(()=>{});
    }
  }
} catch(e){/* ignore */}

const CACHE_NAME = 'solo-v6-cache-cache';
const ASSETS = ['/static/index.html?v6','/static/styles.css?v6','/static/app.js?v6','/static/manifest.json?v6','/static/icon-192.svg?v6','/static/icon-512.svg?v6','/static/sounds/ping.wav?v6'];
self.addEventListener('install', event => {
  event.waitUntil(caches.open(CACHE_NAME).then(cache => cache.addAll(ASSETS)).then(() => self.skipWaiting()));
});
self.addEventListener('activate', event => {
  event.waitUntil(caches.keys().then(keys => Promise.all(keys.map(k => { if(k !== CACHE_NAME) return caches.delete(k); }))).then(() => self.clients.claim()));
});
self.addEventListener('fetch', event => {
  if(event.request.method !== 'GET') return;
  event.respondWith(caches.match(event.request).then(cached => cached || fetch(event.request).then(resp => { try{ const copy = resp.clone(); caches.open(CACHE_NAME).then(c => c.put(event.request, copy)); }catch(e){} return resp; }).catch(() => cached)));
});
