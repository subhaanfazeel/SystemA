from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import json, os, random
from datetime import datetime, date

app = FastAPI()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, "data", "player_data.json")

app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

def now_iso():
    return datetime.now().isoformat()

def seed_data():
    return {
        "tasks": [],
        "punishments": ["10m cold shower", "50 burpees", "No social media today"],
        "non_negotiables": [{"text":"No phone in bed","created":now_iso(),"modified":None},{"text":"No junk after 8pm","created":now_iso(),"modified":None}],
        "streak": 0, "best_streak": 0,
        "last_login": None,
        "name": "",
        "shop": {"coins":0, "items": []},
        "attributes": {"strength":0,"intelligence":0,"spirituality":0,"discipline":0},
        "diary": [],
        "settings": {"sounds": True, "mobile_fullscreen": True},
        "stats": {"tasks_completed":0}
    }

def load_data():
    if not os.path.exists(DATA_FILE):
        d = seed_data()
        save_data(d)
        return d
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        d = json.load(f)
    if "attributes" not in d:
        d["attributes"] = {"strength":0,"intelligence":0,"spirituality":0,"discipline":0}
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, indent=2, ensure_ascii=False, default=str)

app.mount("/static", StaticFiles(directory=os.path.join(BASE_DIR, "static")), name="static")

@app.get("/")
async def index():
    return FileResponse(os.path.join(BASE_DIR, "static", "index.html"))

@app.get("/api/data")
async def get_data():
    d = load_data()
    return {"data": d, "missed_day": False, "punishment": None}

@app.post("/api/tasks/add")
async def add_task(request: Request):
    body = await request.json()
    task = (body.get("task") or "").strip()
    deadline = (body.get("deadline") or "").strip() or None
    coins = int(body.get("coins") or 5)
    xp = int(body.get("xp") or 0)
    stat = (body.get("stat") or "discipline").strip().lower()
    d = load_data()
    if task:
        d["tasks"].append({
            "task": task,
            "deadline": deadline,
            "done": False,
            "created": now_iso(),
            "coins": coins,
            "xp": xp,
            "stat": stat,
            "failed": False
        })
        save_data(d)
    return {"tasks": d["tasks"]}

@app.post("/api/tasks/toggle/{idx}")
async def toggle_task(idx: int):
    d = load_data()
    if 0 <= idx < len(d["tasks"]):
        t = d["tasks"][idx]
        t["done"] = not t.get("done", False)
        if t["done"]:
            coins = int(t.get("coins") or 0)
            xp = int(t.get("xp") or 0)
            stat = (t.get("stat") or "discipline").strip().lower()
            d["shop"]["coins"] = d.get("shop",{}).get("coins",0) + coins
            attrs = d.get("attributes",{})
            attrs[stat] = attrs.get(stat,0) + xp
            d["stats"]["tasks_completed"] = d["stats"].get("tasks_completed",0) + 1
        save_data(d)
    return {"tasks": d["tasks"], "stats": d["stats"], "shop": d["shop"], "attributes": d.get("attributes",{})}

@app.post("/api/tasks/delete/{idx}")
async def delete_task(idx:int):
    d = load_data()
    if 0 <= idx < len(d["tasks"]):
        d["tasks"].pop(idx)
        save_data(d)
    return {"tasks": d["tasks"]}

@app.post("/api/tasks/fail/{idx}")
async def fail_task(idx:int):
    d = load_data()
    if 0 <= idx < len(d["tasks"]):
        d["tasks"][idx]["failed"] = True
        save_data(d)
    return {"tasks": d["tasks"]}

@app.post("/api/punishments/add")
async def add_punishment(request: Request):
    body = await request.json()
    text = (body.get("punishment") or "").strip()
    d = load_data()
    if text:
        d["punishments"].append(text)
        save_data(d)
    return {"punishments": d["punishments"]}

@app.post("/api/punishments/delete/{idx}")
async def delete_punishment_idx(idx: int):
    d = load_data()
    if 0 <= idx < len(d.get("punishments", [])):
        d["punishments"].pop(idx)
        save_data(d)
    return {"punishments": d.get("punishments", [])}

@app.get("/api/punishments")
async def get_punishments():
    d = load_data()
    return {"punishments": d["punishments"]}

@app.post("/api/diary/add")
async def diary_add(req: Request):
    body = await req.json()
    entry = (body.get("entry") or "").strip()
    d = load_data()
    if entry:
        d["diary"].append({"text": entry, "ts": now_iso()})
        save_data(d)
    return {"diary": d["diary"]}

@app.get("/api/diary")
async def diary_get():
    d = load_data()
    return {"diary": d["diary"]}

@app.get("/api/shop")
async def shop_get():
    d = load_data()
    return {"shop": d["shop"], "catalog":[
        {"id":1,"name":"Glowy Banner","price":10},
        {"id":2,"name":"Mute Punishments","price":50}
    ]}

@app.post("/api/shop/buy/{item_id}")
async def shop_buy(item_id: int):
    d = load_data()
    catalog = {1:{"name":"Glowy Banner","price":10}, 2:{"name":"Mute Punishments","price":50}}
    item = catalog.get(item_id)
    if not item:
        return JSONResponse({"error":"Item not found"}, status_code=404)
    if d["shop"].get("coins",0) < item["price"]:
        return JSONResponse({"error":"Not enough coins"}, status_code=400)
    d["shop"]["coins"] -= item["price"]
    if item["name"] not in d["shop"]["items"]:
        d["shop"]["items"].append(item["name"])
    save_data(d)
    return {"shop": d["shop"]}

@app.post("/api/settings")
async def save_settings(req: Request):
    body = await req.json()
    d = load_data()
    if isinstance(body, dict):
        if "settings" in body and isinstance(body["settings"], dict):
            d["settings"].update(body["settings"])
        else:
            d["settings"].update(body)
        save_data(d)
    return {"settings": d["settings"]}

@app.get("/api/stats")
async def get_stats():
    d = load_data()
    return {"stats": d["stats"], "attributes": d.get("attributes",{})}
